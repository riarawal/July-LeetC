Top K Frequent Elements
Given a non-empty array of integers, return the k most frequent elements.


Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.

---------

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        HashMap<Integer, Integer> mp=new HashMap<>();
        
        for(int i=0;i<nums.length;i++)
        {
            if(mp.containsKey(nums[i]))
            {
                int oldf=mp.get( nums[i]);
                int newf=oldf+1;
                mp.put(nums[i],newf);
            }
            //1st occurance pe else mei jata h fir if mei jake old freq nikal ke new freq krke dalege 
            else{
                mp.put(nums[i],1);
            }
        }
        int[] arr=new int[k];
        PriorityQueue<Map.Entry<Integer, Integer> > queue =  
           new PriorityQueue<>( 
            (a, b) -> a.getValue().equals(b.getValue()) ?  
                      Integer.compare(b.getKey(), a.getKey()) :  
                      Integer.compare(b.getValue(), a.getValue())); 
  
        // Insert the data from the map to the Priority Queue. 
        for (Map.Entry<Integer, Integer> entry : mp.entrySet()) 
            queue.add(entry); 
        // Print the top k elements 
        for (int i = 0; i < k; i++) { 
            arr[i]+=queue.remove().getKey(); 
        } 
        return arr;
    } 
}
