Word Break II

Solution
Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
Output:
[
  "cats and dog",
  "cat sand dog"
]
Example 2:

Input:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
Output:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
Explanation: Note that you are allowed to reuse a dictionary word.
Example 3:

Input:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
Output:
[]


----------

// class Solution {
//     public List<String> wordBreak(String s, List<String> wordDict) {
        
//     }
// }

// public class Solution {
//     public ArrayList<String> wordBreak(String s, List<String> dict) {
//         ArrayList<String> result = new ArrayList<String>();
//         if (s == null || s.isEmpty() || dict.isEmpty()) 
//             return result;
         
//         wordBreakHelper(s, dict, "", result);
         
//         return result;
//     }
     
//     private void wordBreakHelper(String s, List<String> dict, String item, ArrayList<String> result) {
//         if (s.isEmpty()) {
//             result.add(item);
//             return;
//         }
         
//         StringBuilder sb = new StringBuilder();
//         for (int i = 0; i < s.length(); i++) {
//             sb.append(s.charAt(i));
//             if (dict.contains(sb.toString())) {
//                 String newItem = item.length() > 0 ? item + " " + sb.toString() : sb.toString();
//                 wordBreakHelper(s.substring(i + 1), dict, newItem, result);
//             }
//         }
//     }
// }


public class Solution {
    public ArrayList<String> wordBreak(String s, List<String> dict) {
        ArrayList<String> result = new ArrayList<String>();
        if (s == null || s.isEmpty() || dict.isEmpty()) 
            return result;
         
        wordBreakHelper(s, dict, "", result);
         
        return result;
    }
     
    private void wordBreakHelper(String s, List<String> dict, String item, ArrayList<String> result) {
        if (!isBreakable(s, dict)) return;
         
        if (s.isEmpty()) {
            result.add(item);
            return;
        }
         
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            sb.append(s.charAt(i));
            if (dict.contains(sb.toString())) {
                String newItem = item.length() > 0 ? item + " " + sb.toString() : sb.toString();
                wordBreakHelper(s.substring(i + 1), dict, newItem, result);
            }
        }
    }
     
    private boolean isBreakable(String s, List<String> dict) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
         
        for (int i = 1; i <= s.length(); i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] == true && dict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
         
        return dp[s.length()];
    }
}
