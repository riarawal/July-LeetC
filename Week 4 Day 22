Binary Tree Zigzag Level Order Traversal
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

----------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res=new ArrayList<>();
        Stack<TreeNode> s1=new Stack<>();
        Stack<TreeNode> s2=new Stack<>();
        
        if(root==null)return res;

        s1.push(root);
        List<Integer> list=new ArrayList<>();
        while(!s1.isEmpty()|| !s2.isEmpty())
        {
            while(!s1.isEmpty())
            {
                TreeNode n=s1.pop();
                list.add(n.val);
                
                if(n.left!=null)s2.push(n.left);
                if(n.right!=null)s2.push(n.right);
            }
            if(!list.isEmpty())res.add(new ArrayList<>(list));
            list.clear();
            while(!s2.isEmpty())
            {
                TreeNode n=s2.pop();
                list.add(n.val);
                
                if(n.right!=null)s1.push(n.right);
                if(n.left!=null)s1.push(n.left);
            }
            if(!list.isEmpty())res.add(new ArrayList<>(list));
            list.clear();
        }
        return res;
    }
}

